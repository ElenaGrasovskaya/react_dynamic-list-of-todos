{"version":3,"sources":["types/ShowType.ts","components/TodoList/TodoList.tsx","components/TodoFilter/TodoFilter.tsx","components/Loader/Loader.tsx","api.ts","components/TodoModal/TodoModal.tsx","App.tsx","index.tsx"],"names":["ShowType","TodoList","todos","selectedTodo","onSelectedTodo","changeShowModal","className","map","todo","id","completed","cn","title","type","onClick","TodoFilter","onChangeShow","show","onChangeFilter","filter","value","onChange","event","target","all","active","placeholder","style","pointerEvents","Loader","get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","res","json","TodoModal","useState","user","setUser","loading","setLoading","userError","setUserError","useEffect","userId","data","catch","error","message","finally","href","email","name","App","todosFromServer","setTodosFromServer","todosShowMode","setTodosShowMode","todosFilterByTitle","setTodosFilterByTitle","setSelectedTodo","isShowModal","setIsShowModal","isLoading","setIsLoading","todoError","setTodoError","newFilter","newShow","todoCopy","lowerCaseFilter","trim","toLowerCase","includes","getFilteredTodos","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.145d1f2d.chunk.js","sourcesContent":["export enum ShowType {\n  all = 'all',\n  active = 'active',\n  completed = 'completed',\n}\n","import React from 'react';\nimport cn from 'classnames';\nimport { Todo } from '../../types/Todo';\n\ninterface Props {\n  todos: Todo[];\n  selectedTodo: Todo | null;\n  onSelectedTodo: (value: Todo | null) => void;\n  changeShowModal: (value: boolean) => void;\n}\n\nexport const TodoList: React.FC<Props> = ({\n  todos,\n  selectedTodo,\n  onSelectedTodo,\n  changeShowModal,\n}) => {\n  return (\n    <table className=\"table is-narrow is-fullwidth\">\n      <thead>\n        <tr>\n          <th>#</th>\n          <th>\n            <span className=\"icon\">\n              <i className=\"fas fa-check\" />\n            </span>\n          </th>\n          <th>Title</th>\n          <th> </th>\n        </tr>\n      </thead>\n\n      <tbody>\n        {todos.map((todo) => (\n          <tr data-cy=\"todo\" className=\"\" key={todo.id}>\n            <td className=\"is-vcentered\">{todo.id}</td>\n            <td className=\"is-vcentered\">\n              {todo.completed && (\n                <span className=\"icon\" data-cy=\"iconCompleted\">\n                  <i className=\"fas fa-check\" />\n                </span>\n              )}\n            </td>\n            <td className=\"is-vcentered is-expanded\">\n              <p\n                className={cn({\n                  'has-text-success': todo.completed,\n                  'has-text-danger': !todo.completed,\n                })}\n              >\n                {todo.title}\n              </p>\n            </td>\n            <td className=\"has-text-right is-vcentered\">\n              <button\n                data-cy=\"selectButton\"\n                className=\"button\"\n                type=\"button\"\n                onClick={() => {\n                  onSelectedTodo(todo);\n                  changeShowModal(true);\n                }}\n              >\n                <span className=\"icon\">\n                  {todo.id === selectedTodo?.id ? (\n                    <i className=\"far fa-eye-slash\" />\n                  ) : (\n                    <i className=\"far fa-eye\" />\n                  )}\n                </span>\n              </button>\n            </td>\n          </tr>\n        ))}\n      </tbody>\n    </table>\n  );\n};\n","import { ShowType } from '../../types/ShowType';\n\ninterface Props {\n  show: ShowType;\n  filter: string;\n  onChangeShow: (value: ShowType) => void;\n  onChangeFilter: (value: string) => void;\n}\n\nexport const TodoFilter: React.FC<Props> = ({\n  onChangeShow,\n  show,\n  onChangeFilter,\n  filter,\n}) => {\n  return (\n    <form className=\"field has-addons\">\n      <p className=\"control\">\n        <span className=\"select\">\n          <select\n            data-cy=\"statusSelect\"\n            value={show}\n            onChange={(event) => onChangeShow(event.target.value as ShowType)}\n          >\n            <option value={ShowType.all}>All</option>\n            <option value={ShowType.active}>Active</option>\n            <option value={ShowType.completed}>Completed</option>\n          </select>\n        </span>\n      </p>\n\n      <p className=\"control is-expanded has-icons-left has-icons-right\">\n        <input\n          data-cy=\"searchInput\"\n          type=\"text\"\n          className=\"input\"\n          placeholder=\"Search...\"\n          value={filter}\n          onChange={(event) => onChangeFilter(event.target.value)}\n        />\n        <span className=\"icon is-left\">\n          <i className=\"fas fa-magnifying-glass\" />\n        </span>\n\n        <span className=\"icon is-right\" style={{ pointerEvents: 'all' }}>\n          {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n          {filter && (\n            <button\n              data-cy=\"clearSearchButton\"\n              aria-label=\"clear\"\n              type=\"button\"\n              className=\"delete\"\n              onClick={() => onChangeFilter('')}\n            />\n          )}\n        </span>\n      </p>\n    </form>\n  );\n};\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\n// This function creates a promise\n// that is resolved after a given delay\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + url + '.json';\n\n  // we add some delay to see how the loader works\n  return wait(300)\n    .then(() => fetch(fullURL))\n    .then(res => res.json());\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n","import React, { useState, useEffect } from 'react';\nimport { Loader } from '../Loader';\nimport { Todo } from '../../types/Todo';\nimport { User } from '../../types/User';\nimport { getUser } from '../../api';\n\ninterface Props {\n  selectedTodo: Todo | null;\n  changeShowModal: (value: boolean) => void;\n  onSelectedTodo: (value: Todo | null) => void;\n}\n\nexport const TodoModal: React.FC<Props> = ({\n  selectedTodo,\n  changeShowModal,\n  onSelectedTodo,\n}) => {\n  const [user, setUser] = useState<User>();\n  const [loading, setLoading] = useState(true);\n  const [userError, setUserError] = useState('');\n\n  useEffect(() => {\n    if (selectedTodo) {\n      getUser(selectedTodo.userId)\n        .then((data: User) => {\n          setUser(data);\n        })\n        .catch((error) => setUserError(error.message))\n        .finally(() => setLoading(false));\n    }\n  }, [selectedTodo]);\n\n  return (\n    <div className=\"modal is-active\" data-cy=\"modal\">\n      <div className=\"modal-background\" />\n\n      {loading ? (\n        <Loader />\n      ) : (\n        <div className=\"modal-card\">\n          <header className=\"modal-card-head\">\n            <div\n              className=\"modal-card-title has-text-weight-medium\"\n              data-cy=\"modal-header\"\n            >\n              {`Todo #${selectedTodo?.id}`}\n            </div>\n\n            {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n            <button\n              type=\"button\"\n              className=\"delete\"\n              data-cy=\"modal-close\"\n              onClick={() => {\n                setLoading(true);\n                changeShowModal(false);\n                onSelectedTodo(null);\n              }}\n            />\n          </header>\n\n          <div className=\"modal-card-body\">\n            <p className=\"block\" data-cy=\"modal-title\">\n              {selectedTodo?.title}\n            </p>\n\n            <p className=\"block\" data-cy=\"modal-user\">\n              {selectedTodo?.completed ? (\n                <strong className=\"has-text-success\">Done</strong>\n              ) : (\n                <strong className=\"has-text-danger\">Planned</strong>\n              )}\n\n              {' by '}\n              {userError ? (\n                <p>\n                  {' '}\n                  {userError}\n                  {' '}\n                </p>\n              ) : (\n                <a href={`mailto:${user?.email}`}>{user?.name}</a>\n              )}\n            </p>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n","/* eslint-disable max-len */\nimport React, { useState, useEffect } from 'react';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { TodoModal } from './components/TodoModal';\nimport { Loader } from './components/Loader';\nimport { getTodos } from './api';\nimport { Todo } from './types/Todo';\nimport { ShowType } from './types/ShowType';\n\nexport const App: React.FC = () => {\n  const [todosFromServer, setTodosFromServer] = useState<Todo[]>([]);\n  const [todosShowMode, setTodosShowMode] = useState<ShowType>(ShowType.all);\n  const [todosFilterByTitle, setTodosFilterByTitle] = useState('');\n  const [selectedTodo, setSelectedTodo] = useState<Todo | null>(null);\n  const [isShowModal, setIsShowModal] = useState(false);\n  const [isLoading, setIsLoading] = useState(true);\n  const [todoError, setTodoError] = useState('');\n\n  useEffect(() => {\n    getTodos()\n      .then(setTodosFromServer)\n      .catch((error) => setTodoError(error.message))\n      .finally(() => setIsLoading(false));\n  }, []);\n\n  const getFilteredTodos = (newFilter: string, newShow: ShowType) => {\n    let todoCopy: Todo[] = [...todosFromServer];\n\n    if (newShow === ShowType.active) {\n      todoCopy = todosFromServer.filter((todo) => !todo.completed);\n    }\n\n    if (newShow === ShowType.completed) {\n      todoCopy = todosFromServer.filter((todo) => todo.completed);\n    }\n\n    if (newFilter) {\n      const lowerCaseFilter = newFilter.trim().toLowerCase();\n\n      return todoCopy.filter((todo) => todo.title.toLowerCase().includes(lowerCaseFilter));\n    }\n\n    return todoCopy;\n  };\n\n  const todos = getFilteredTodos(todosFilterByTitle, todosShowMode);\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            <h1 className=\"title\">Todos:</h1>\n\n            <div className=\"block\">\n              <TodoFilter\n                show={todosShowMode}\n                filter={todosFilterByTitle}\n                onChangeShow={setTodosShowMode}\n                onChangeFilter={setTodosFilterByTitle}\n              />\n            </div>\n\n            <div className=\"block\">\n              {isLoading && <Loader />}\n              {(!isLoading && todoError) && (\n                <p>\n                  {' '}\n                  {todoError}\n                  {' '}\n                </p>\n              )}\n              <TodoList\n                todos={todos}\n                selectedTodo={selectedTodo}\n                onSelectedTodo={setSelectedTodo}\n                changeShowModal={setIsShowModal}\n              />\n            </div>\n          </div>\n        </div>\n      </div>\n      {isShowModal && selectedTodo && (\n        <TodoModal\n          selectedTodo={selectedTodo}\n          onSelectedTodo={setSelectedTodo}\n          changeShowModal={setIsShowModal}\n        />\n      )}\n    </>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}